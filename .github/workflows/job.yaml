name: Deploy to S3

# on:
#   push:
#     branches: [ "main" ]

on:
  workflow_dispatch:  # Manual trigger
    inputs:
      confirm:
        description: "Type 'deploy' to confirm"
        required: true
        default: "cancel"

jobs:
  deploy:
    if: github.event.inputs.confirm == 'deploy'  # Double confirmation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3
      
      - name: Install jq
        run: sudo apt-get install -y jq
      
         # Restore state from GitHub secret before terraform init
      - name: Restore Terraform State
        run: |
          if [ ! -z "${{ secrets.TERRAFORM_STATE }}" ]; then
          echo "${{ secrets.TERRAFORM_STATE }}" > terraform.tfstate
          fi

      - name: Terraform Init
        run: terraform init

      - name: Terraform Plan
        run: terraform plan -var="bucket_name=${{ secrets.BUCKET_NAME }}"

      - name: Terraform Apply
        #run: terraform apply -auto-approve -var="bucket_name=${{ secrets.BUCKET_NAME }}"
        run: terraform apply -auto-approve #-var="bucket_name=${{ vars.BUCKET_NAME }}"

      # # Save the updated state back to GitHub secret
      # - name: Save Terraform State
      #   run: |
      #     STATE_CONTENT=$(cat terraform.tfstate)
      #     echo "STATE_CONTENT<<EOF" >> $GITHUB_ENV
      #     echo "$STATE_CONTENT" >> $GITHUB_ENV
      #     echo "EOF" >> $GITHUB_ENV

      # - name: Update GitHub Secret
      #   uses: gliech/create-github-secret-action@v1
      #   with:
      #     name: TERRAFORM_STATE
      #     value: ${{ env.STATE_CONTENT }}
      #     pa_token: ${{ secrets.GH_PA_TOKEN }}

    
